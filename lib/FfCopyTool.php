<?php

/**
 * Class FfCopyTool.
 */
class FfCopyTool
{
    /**
     * @var array
     */
    protected static array $settings = [];

    /**
     * init.
     */
    public static function init(): void
    {
        try {
            self::$settings['master_db'] = rex_addon::get('ff_copy_tool')->getConfig('master_db');
        } catch (Exception $e) {
            rex_logger::logException($e);
        }
        try {
            self::$settings['child_dbs'] = rex_addon::get('ff_copy_tool')->getConfig('child_dbs');
        } catch (Exception $e) {
            rex_logger::logException($e);
        }
        try {
            self::$settings['child_sites'] = rex_addon::get('ff_copy_tool')->getConfig('child_sites');
        } catch (Exception $e) {
            rex_logger::logException($e);
        }
    }

    /**
     * @param $childsDBs
     */
    public static function getChildren($childsDBs): array
    {
        return preg_split(
            "/[\s,]*\\\"([^\\\"]+)\\\"[\s,]*|" . "[\s,]*'([^']+)'[\s,]*|" . "[\s,]+/",
            $childsDBs,
            0,
            PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE
        );
    }

    /**
     * @param \rex_extension_point $epoint
     *
     * @throws \rex_exception
     */
    public static function addBackendSidebar(rex_extension_point $epoint): string
    {
        $params = $epoint->getParams();
        $subject = $epoint->getSubject();

        $panel = include rex_path::addon('ff_copy_tool', 'pages/content.ff_copy_tool.sidebar.php');

        $fragment = new rex_fragment();
        $fragment->setVar(
            'title',
            '<i class="rex-icon rex-icon-info"></i> ' . rex_i18n::msg('ff_copy_tool_extras'),
            false
        );
        $fragment->setVar('body', $panel, false);
        $fragment->setVar('article_id', $params['article_id'], false);

        $fragment->setVar('collapse', true);
        $fragment->setVar('collapsed', true);
        $content = $fragment->parse('core/page/section.php');

        return $subject . $content;
    }

    /**
     * @param $article_id
     * @param $site_id
     *
     * @return bool
     */
    public static function copyArticle($article_id, $site_id): bool
    {
        $addon = rex_addon::get('ff_copy_tool');
        $sites = $addon->getConfig('slave_sites');
        $token = $addon->getConfig('slave_token');

        $fct = new self();
        $sites = $fct::getChildren($sites);
        $token = $fct::getChildren($token);

        // rex_article
        $query['fc_article'] = 'SELECT * FROM ' . rex::getTablePrefix() . 'article WHERE id = "' . $article_id . '"';
        // rex_article_slice
        $query['fc_article_slice'] = 'SELECT * FROM ' . rex::getTablePrefix() . 'article_slice WHERE article_id  = "' . $article_id . '"';
        // rex_media
        $query['fc_media'] = self::mediaInUse($article_id);

        // generated by https://reqbin.com/req/4rwevrqh/post-json-example
        $headers = [
            'Accept: application/json',
            'Token: ' . $token[$site_id],
            'Content-Type: application/json',
        ];

        $sql = rex_sql::factory();
        $sql->setDebug(false);

        foreach ($query as $type => $select) {
            if ($select !== '') {
                $url = 'https://' . $sites[$site_id] . '/rest/copy/' . $type;
                $sql_query_failed = false;

                try {
                    $sql->setQuery($select);
                } catch (rex_sql_exception $e) {
                    rex_logger::logException($e);
                    $sql_query_failed = true;
                }
                if (!$sql_query_failed && $sql->getRows() > 0) {
                    while ($sql->hasNext()) {
                        $values = $sql->getRow();
                        foreach ($values as $fieldname => $value) {
                            $fieldname_array = explode('.', $fieldname);
                            $fieldname_new = $fieldname_array[1];
                            if ($fieldname_new === 'pid') {
                                $fieldname_new = 'fc_pid';
                            }
                            if ($fieldname_new === 'id') {
                                $fieldname_new = 'fc_id';
                            }
                            $values[$fieldname_new] = $value;
                            if ($type === 'fc_article'){
                                if ($fieldname_new === 'catname') {
                                    $values[$fieldname_new] = '';
                                }
                                if ($fieldname_new === 'parent_id') {
                                    $values[$fieldname_new] = '0';
                                }
                                if ($fieldname_new === 'path') {
                                    $values[$fieldname_new] = '|';
                                }
                                if ($fieldname_new === 'priority') {
                                    $values[$fieldname_new] = '999999';
                                }
                            }
                            unset($values[$fieldname]);
                        }

                        $data = '{
"data": {
"type": "' . $type . '",
"attributes": ' . PHP_EOL;
                        $data .= json_encode($values);
                        $data .= '
}
}
';

                        $resp = self::talkToApi($url, $headers, $data);
                        $error = json_decode($resp, true);
                        if (array_key_exists('errors', $error)) {
                            rex_logger::logError(
                                2,
                                'ff_copy_tool: Talk to API url: ' . $url . ' failed, with error: ' .
                                $error['errors']['message'] .
                                ' / status: ' . $error['errors']['status'],
                                __FILE__,
                                __LINE__
                            );
                        }
                        $sql->next();
                    }
                }
            }
        }

        return true;
    }

    /**
     * @param string $url
     * @param array  $headers
     * @param string $data
     *
     * @return bool|string
     */
    public static function talkToApi(
        string $url,
        array $headers,
        string $data
    ): string|bool {
        $curl = curl_init($url);
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

        curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);

        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);

        $resp = curl_exec($curl);
        curl_close($curl);

        return $resp;
    }

    /**
     * Return sql query with all used mediapool media from article
     *
     * @param int $article_id
     *
     * @return string
     */
    public static function mediaInUse(int $article_id): string
    {
        $query = '';
        $sql_query_failed = false;
        $found_media = false;

        $sql = rex_sql::factory();
        $select = 'SELECT * from rex_article_slice WHERE article_id = "' . $article_id . '"';

        try {
            $sql->setQuery($select);
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);
            $sql_query_failed = true;
        }

        if (!$sql_query_failed && $sql->getRows() > 0) {
            $query = 'SELECT *, ' .
                $sql->escape(rex::getServer() . 'media/') . ' AS ' . $sql->escapeIdentifier('server') . '
                FROM ' . rex::getTablePrefix() . 'media WHERE ';
            while ($sql->hasNext()) {
                $values = $sql->getRow();
                foreach ($values as $fieldname => $value) {
                    /*
                     * TODO value1 .. value20
                     * rex_media_file
                     * media
                     * 2. media1 .. media10 - ok
                     * 3. medialist1 .. medialist10 - ok
                     */
                    if (($value !== '') && (null !== $value) && preg_match('/media(list)?\d+/', $fieldname)) {
                        $value_array = explode(',', $value);
                        foreach ($value_array as $filename) {
                            if ($found_media) {
                                $query .= ' OR ';
                            }
                            $query .= 'filename = "' . $filename . '"';
                        }
                        $found_media = true;
                    }
                }
                $sql->next();
            }
        } else {
            $query = '';
        }
        if (!$found_media) {
            $query = '';
        }

        return $query;
    }

    /**
     * Check if there is an article in the fc_article db table
     *
     * @return bool
     */
    public static function checkNewArticle(): bool
    {
        $sql_query_failed = false;
        $sql = rex_sql::factory();
        $sql->setDebug(false);

        $query = 'SELECT fc_pid FROM ' . rex::getTablePrefix() . 'fc_article WHERE -1';
        try {
            $sql->setQuery($query);
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);
            $sql_query_failed = true;
        }

        return !$sql_query_failed && $sql->getRows() > 0;
    }

    /**
     * @return bool
     */
    public static function runsOnTarget(): bool
    {
        // check if there is something to do
        if (self::checkNewArticle() === true) {
            if (!self::writeArticle()) {
                rex_logger::logError(
                    2,
                    'Something went wrong while writing copied articles into live database',
                    __FILE__,
                    __LINE__
                );

                return false;
            }
            if (!self::writeMedia()) {
                rex_logger::logError(
                    2,
                    'Something went wrong while writing copied media into live database',
                    __FILE__,
                    __LINE__
                );

                return false;
            }

            // clear cache
            rex_yrewrite::deleteCache();
        }

        return true;
    }

    public static function writeMedia(): bool
    {
        $sql_query_failed = false;
        $sql = rex_sql::factory();
        $sql->setDebug(false);

        $query = 'SELECT * FROM ' . rex::getTablePrefix() . 'fc_media WHERE -1';
        try {
            $sql->setQuery($query);
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);
            $sql_query_failed = true;
        }

        if (!$sql_query_failed && $sql->getRows() > 0) {
            $forbidden_fields = array('fc_id', 'id', 'server');
            $forbidden_fields = self::checkExistingFields('media', 'fc_media', $forbidden_fields);
            $sql_insert = rex_sql::factory();
            $sql_insert->setDebug(false);
            while ($sql->hasNext()) {
                $insertCounter = 0;
                try {
                    $name = $sql->getValue('filename');
                } catch (rex_sql_exception $e) {
                    rex_logger::logException($e);
                }
                $rex_media = rex_media::get($name);
                if (null === $rex_media) {
                    $insert_query = 'INSERT INTO ' . rex::getTablePrefix() . 'media SET ';
                    $values = $sql->getRow();

                    // gibts schon so ein file das so heisst, dann kopier ich den eintrag nicht
                    foreach ($values as $fieldname => $value) {
                        $fieldname_array = explode('.', $fieldname);
                        $fieldname_new = $fieldname_array[1];

                        if (!in_array($fieldname_new, $forbidden_fields, true)) {
                            if ($insertCounter > 0) {
                                $insert_query .= ', ';
                            }
                            if (is_string($value)) {
                                $insert_query .= $sql->escapeIdentifier($fieldname_new) . ' = ' . $sql->escape($value);
                            } else {
                                $insert_query .= $sql->escapeIdentifier($fieldname_new) . ' = ' . $value;
                            }
                            $insertCounter++;
                        }
                    }
                    try {
                        $sql_insert->setQuery($insert_query);
                    } catch (rex_sql_exception $e) {
                        rex_logger::logException($e);
                    }
                    // copy file
                    try {
                        self::copyFile($sql->getValue('server'), $sql->getValue('filename'));
                    } catch (rex_sql_exception $e) {
                        rex_logger::logException($e);
                    }
                }
                $sql->next();
            }
            $query = 'DELETE FROM ' . rex::getTablePrefix() . 'fc_media WHERE -1';
            try {
                $sql->setQuery($query);
            } catch (rex_sql_exception $e) {
                rex_logger::logException($e);
            }
        }

        return true;
    }

    public static function checkExistingFields(string $tablename, string $temp_tablename, array $forbidden_fields): array
    {
        $sql = rex_sql::factory();
        $sql->setDebug(false);
        $sql->setTable(rex::getTablePrefix() . $tablename);
        try {
            $sql->setWhere('id IS NOT NULL LIMIT 1');
            $sql->select();
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);
        }
        $fieldnames = $sql->getFieldnames();

        $sql = rex_sql::factory();
        $sql->setDebug(false);
        $sql->setTable(rex::getTablePrefix() . $temp_tablename);
        try {
            $sql->setWhere('id IS NOT NULL LIMIT 1');
            $sql->select();
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);
        }
        $temp_fieldnames = $sql->getFieldnames();

        foreach ($temp_fieldnames as $temp_fieldname) {
            if (!in_array($temp_fieldname, $fieldnames, true)) {
                $forbidden_fields[] = $temp_fieldname;
            }
        }

        return $forbidden_fields;
    }

    public static function cURLcheckBasicFunctions(): ?bool
    {
        return !(!function_exists('curl_init') &&
            !function_exists('curl_setopt') &&
            !function_exists('curl_exec') &&
            !function_exists('curl_close'));
    }

    public static function copyFile(string $server, string $filename): bool
    {
        $url = $server . $filename;
        if (!self::cURLcheckBasicFunctions()) {
            rex_logger::logError(1, 'UNAVAILABLE: cURL Basic Functions', __FILE__, __LINE__);
        }
        $ch = curl_init($url);
        if ($ch) {
            $localFile = rex_path::media() . $filename;
            $fp = fopen($localFile, 'wb');
            if ($fp) {
                curl_setopt($ch, CURLOPT_FILE, $fp);
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
                curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);
                curl_setopt($ch, CURLOPT_TIMEOUT, 60);
                curl_exec($ch);
                fclose($fp);
            } else {
                rex_logger::logError(
                    1,
                    'ff_copy_tool: writing of file ' . $localFile . ' didn\'t work. FAIL: fopen()',
                    __FILE__,
                    __LINE__
                );
            }
            curl_close($ch);
        } else {
            rex_logger::logError(
                1,
                'ff_copy_tool: reading of url ' . $url . ' didn\'t work. FAIL: curl_init()',
                __FILE__,
                __LINE__
            );
        }

        return true;
    }

    /**
     * @param array $idArray
     *
     * @return bool
     */
    public static function deleteOldPages(array $idArray): bool
    {
        $ids = implode("','", $idArray);
        $sql = rex_sql::factory();
        $sql->setDebug(false);
        $deleteQuery = 'DELETE FROM ' . rex::getTablePrefix() . 'fc_article WHERE ' .
            $sql->escapeIdentifier('id') . ' IN (' . $sql->escape($ids) . ')';

        try {
            $sql->setQuery($deleteQuery);
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);

            return false;
        }

        return true;
    }

    /**
     * @param int $oldId
     *
     * @return bool
     */
    public static function deleteOldSlices(int $oldId): bool
    {
        $sql = rex_sql::factory();
        $sql->setDebug(false);
        $deleteQuery = 'DELETE FROM ' . rex::getTablePrefix() . 'fc_article_slice WHERE ' .
            $sql->escapeIdentifier('article_id') . ' = ' . $sql->escape($oldId) . '';

        try {
            $sql->setQuery($deleteQuery);
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);

            return false;
        }

        return true;
    }

    /**
     * Copy slices from rex_fc_article_slice to rex_article_slice
     *
     * @param int $old_id
     * @param int $new_id
     *
     * @return bool
     */
    public static function writeSlices(int $old_id, int $new_id): bool
    {
        $sql_query_failed = false;
        $sql = rex_sql::factory();
        $sql->setDebug(false);

        $query = 'SELECT * FROM ' . rex::getTablePrefix() . 'fc_article_slice WHERE article_id = ' . $old_id;
        try {
            $sql->setQuery($query);
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);
            $sql_query_failed = true;
        }
        $rows = $sql->getRows();

        if (!$sql_query_failed && $rows > 0) {
            $forbidden_fields = array('id', 'fc_id', 'article_id');
            $forbidden_fields = self::checkExistingFields('article_slice', 'fc_article_slice', $forbidden_fields);
            $sql_insert = rex_sql::factory();
            $sql_insert->setDebug(false);
            while ($sql->hasNext()) {
                $values = $sql->getRow();
                $insert_query = 'INSERT INTO ' . rex::getTablePrefix() . 'article_slice SET ';
                $insert_query .= 'article_id = ' . $new_id;
                foreach ($values as $fieldname => $value) {
                    $fieldname_array = explode('.', $fieldname);
                    $fieldname_new = $fieldname_array[1];

                    if (!in_array($fieldname_new, $forbidden_fields, true)) {
                        $insert_query .= ', ';
                        if (is_string($value)) {
                            $insert_query .= $sql->escapeIdentifier($fieldname_new) . ' = ' . $sql->escape($value);
                        } else {
                            $insert_query .= $sql->escapeIdentifier($fieldname_new) . ' = ' . $value;
                        }
                    }
                }
                try {
                    $sql_insert->setQuery($insert_query);
                } catch (rex_sql_exception $e) {
                    rex_logger::logException($e);

                    return false;
                }

                $sql->next();
            }
            self::deleteOldSlices($old_id);
        }

        return true;
    }

    /**
     * Copy article from rex_fc_article to rex_article
     */
    public static function writeArticle(): bool
    {
        // move data to live tables
        $clang = 1;
        $old_id = 0;
        $deleteTheseIds = array();

        $sql = rex_sql::factory();
        $sql->setDebug(false);

        $query = 'SELECT * FROM ' . rex::getTablePrefix() . 'fc_article WHERE -1';
        try {
            $sql->setQuery($query);
        } catch (rex_sql_exception $e) {
            rex_logger::logException($e);

            return false;
        }
        if ($sql->getRows() > 0) {
            $forbidden_fields = array('pid', 'id', 'fc_id', 'fc_pid', 'name', 'status', 'create_user', 'update_user');
            $forbidden_fields = self::checkExistingFields('article', 'fc_article', $forbidden_fields);
            $sql_insert = rex_sql::factory();
            $sql_insert->setDebug(false);
            while ($sql->hasNext()) {
                $values = $sql->getRow();
                $insert_query = 'INSERT INTO ' . rex::getTablePrefix() . 'article SET ';
                $sql->setTable(rex::getTablePrefix() . 'article');
                try {
                    $new_id = $sql->setNewId('id');
                } catch (rex_sql_exception $e) {
                    rex_logger::logException($e);

                    return false;
                }
                $insert_query .= 'id = ' . $new_id;
                foreach ($values as $fieldname => $value) {
                    $fieldname_array = explode('.', $fieldname);
                    $fieldname_new = $fieldname_array[1];

                    if (!in_array($fieldname_new, $forbidden_fields, false)) {
                        $insert_query .= ', ';
                        if (is_string($value)) {
                            $insert_query .= $sql->escapeIdentifier($fieldname_new) . ' = ' . $sql->escape($value);
                        } else {
                            $insert_query .= $sql->escapeIdentifier($fieldname_new) . ' = ' . $value;
                        }
                    }
                    if ($fieldname_new === 'id') {
                        $deleteTheseIds[] = $value;
                    }
                    if ($fieldname_new === 'clang') {
                        $clang = $value;
                    }
                    if ($fieldname_new === 'fc_id') {
                        $old_id = $value;
                    }
                    if ($fieldname_new === 'name') {
                        $insert_query .= ', ' . $sql->escapeIdentifier('name') . ' = ' .
                            $sql->escape($value . '_copy_' . time());
                    }
                    if ($fieldname_new === 'status') {
                        $insert_query .= ', ' . $sql->escapeIdentifier('status') . ' = 0';
                    }
                    if ($fieldname_new === 'create_user') {
                        $insert_query .= ', ' . $sql->escapeIdentifier('create_user') . ' = ' . $sql->escape('ff_copy_tool');
                    }
                    if ($fieldname_new === 'update_user') {
                        $insert_query .= ', ' . $sql->escapeIdentifier('update_user') . ' = ' . $sql->escape('ff_copy_tool');
                    }
                }
                try {
                    $sql_insert->setQuery($insert_query);
                } catch (rex_sql_exception $e) {
                    rex_logger::logException($e);

                    return false;
                }
                // copy slices
                self::writeSlices($old_id, $new_id);

                // generate URL
                $params = array('id' => $new_id, 'clang' => $clang);
                rex_yrewrite::generatePathFile($params);
                rex_yrewrite::rewrite($params);
                rex_article_cache::delete($new_id);
                // next DB row
                $sql->next();
            }
        }
        // delete old data
        self::deleteOldPages($deleteTheseIds);

        return true;
    }
}
